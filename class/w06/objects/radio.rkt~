#lang racket

;; alarm-clock (parent) and clock-radio (child) objects
;; 
;; The only change here from our previous implementation
;; is the "(ask dispatch 'status)" instead of "(status)".
;;
;; This works because the object *is* the dispatch function,
;; something you can see by simply evaluating the object.


(define ask
  (lambda (obj msg . args)
    (apply (obj msg) args)))

(define make-alarm-clock
  (lambda ()
    (let ((current-time 0)
          (alarm-time 0)
          (alarm-on? #f))
      (define status
        (lambda ()
          (list 'time current-time 
                'alarm (if alarm-on? alarm-time 'off))))
      (define reset
        (lambda ()
          (set! current-time 0)
          (set! alarm-time 0)
          (set! alarm-on? #f)
          (ask dispatch 'status)))
      (define set-time
        (lambda (new-time)
          (set! current-time new-time)
          (ask dispatch 'status)))
      (define tick
        (lambda ()
          (set! current-time (add1 current-time))
          (if (and alarm-on? (>= current-time alarm-time))
              (cons 'rinnnnnng (ask dispatch 'status))
              (ask dispatch 'status))))
      (define set-alarm
        (lambda (new-time)
          (set! alarm-time new-time)
          (set! alarm-on? #t)
          (ask dispatch 'status)))
      (define alarm-off
        (lambda ()
          (set! alarm-on? #f)
          (ask dispatch 'status)))
      (define dispatch
        (lambda (msg)
          (cond
            ((eq? msg 'status) status)
            ((eq? msg 'reset) reset)
            ((eq? msg 'set-time) set-time)
            ((eq? msg 'tick) tick)
            ((eq? msg 'set-alarm) set-alarm)
            ((eq? msg 'alarm-off) alarm-off)
            (else (error "alarm-clock::invalid message:" msg)))))
      dispatch)))


(display "Alarm Clock")
(newline)
(define myclock (make-alarm-clock))
(ask myclock 'tick)
(ask myclock 'tick)
(ask myclock 'set-alarm 4)
(ask myclock 'tick)
(ask myclock 'tick)
(ask myclock 'tick)
(ask myclock 'alarm-off)
(ask myclock 'tick)
(ask myclock 'reset)


;;; The clock radio extends the basic alarm clock and
;;; inherits its functionality from the basic clock.

(define make-clock-radio
  (lambda ()
    (let ((band 'FM)
          (FM-frequency 88.5)
          (AM-frequency 1620)
          ;; Add the base object as part of the state information
          (internal-clock (make-alarm-clock)))
      (define status
        (lambda ()
          (append (list 'band band 'frequency 
                        (if (eq? band 'AM)
                            AM-frequency
                            FM-frequency))
                  (ask internal-clock 'status))))
      (define change-frequency
        (lambda (which-band new-frequency)
          (if (eq? which-band 'FM)
              (begin
                (set! band 'FM)
                (set! FM-frequency new-frequency))
              (begin
                (set! band 'AM)
                (set! AM-frequency new-frequency)))
          (ask dispatch 'status)))
      (define dispatch
        (lambda (msg)
          (cond
            ((eq? msg 'status) status)
            ((eq? msg 'change-frequency) change-frequency)
            ;; Otherwise pass the message up to the parent object
            (else (internal-clock msg)))))
      dispatch)))


(display "Clock Radio")
(newline)
(define myclockradio (make-clock-radio))
(ask myclockradio 'change-frequency 'am 1010)
(ask myclockradio 'tick)
(ask myclockradio 'change-frequency 'fm 90.9)
(ask myclockradio 'tick)
(ask myclockradio 'status)

